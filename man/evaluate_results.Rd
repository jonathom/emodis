% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/evaluate_results.R
\name{evaluate_results}
\alias{evaluate_results}
\title{Iterate through result folders to obtain a dataframe}
\usage{
evaluate_results(
  results_root,
  samples_root,
  sample_designs = c("simpleRandom", "regular", "clusterMedium", "clusterStrong",
    "clusterGapped"),
  samples = 50,
  return_EMD = FALSE,
  methods = c("random", "spatial", "nndm"),
  iterations = 1,
  return_type = "df",
  mask_
)
}
\arguments{
\item{results_root}{The folder containing the method subfolders}

\item{samples_root}{The folder containing the sample realizations}

\item{sample_designs}{A vector containing all sample designs that should be analyzed. Must be the same as in the file names.}

\item{samples}{Number of samples taken for sampled_geodist}

\item{return_EMD}{boolean. Whether to calculate the Earth Mover's distances between the distributions}

\item{methods}{vector of names of the CV methods. Should be the names of the folders contained in /results_root}

\item{iterations}{numeric. Through how many sampling designs should the function iterate?}

\item{return_type}{either "df" or "geodist". "df" returns the dataframe of values, "geodist" returns a list of all geodist objects that were calculated}

\item{mask_}{modeldomain for plot_geodist}
}
\value{
A dataframe or a list (see return_type)
}
\description{
Calculates the Earth Mover's distance between the sample-to-sample and the CV-distances
nearest neighbour distance distributions of a given \code{CAST::plot_geodist} output.
}
\examples{
\dontrun{
# load packages
library(emodis)
library(ggplot2)
# load mask
load(system.file("extdata", "data", "mask.Rdata", package="emodis"))
# run evaluate
df <- evaluate_results(results_root = system.file("extdata", "CVresults", package="emodis"),
samples_root = system.file("extdata", "samples", package="emodis"),
return_EMD = TRUE, # to obtain EMD measures
iterations = 1, # to iterate through all 100 sampling realizations
mask_ = mask)
# make a plot
ggplot(data=df, aes(x=s2s_s2p, y=RMSE_val, color=sample)) +
geom_point()
}
}
